#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <vector>
#include <cmath>
#include "rapidxml/rapidxml.hpp"


typedef float Type;

class Color{
private:
    int r, g, b;
public:
    Color ();
    Color (int r, int g, int b);
    Color (const Color &C);
    friend std::ostream& operator<< (std::ostream& os, const Color& c);
};

std::ostream& operator<< (std::ostream& os, const Color& c);


class Attribute {

public:
    virtual std::string getName() = 0;
    virtual void setValue(Shape* &s, char* attr_value) = 0;
    virtual void what_is_this() = 0;
};

class X : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Y : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class X1 : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Y1 : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class X2 : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Y2 : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Cx : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Cy : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class R : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Rx : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Ry : public Attribute {
private:
    int value;
public:
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Height : public Attribute {
private:
    int value;
public:
    Height() : value(0) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Width : public Attribute {
private:
    int value;
public:
    Width() : value(0) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Fill : public Attribute {
private:
    Color value;
public:
    Fill() : value(Color(255, 255, 255)) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    Color getValue();
    void what_is_this();
};

class Fill_opacity : public Attribute {
private:
    double value;
public:
    Fill_opacity() : value(1) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    double getValue();
    void what_is_this();
};

class Stroke : public Attribute {
private: 
    Color value;
public:
    Stroke() : value(Color(0, 0, 0)) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    Color getValue();
    void what_is_this();
};

class Stroke_width : public Attribute {
private:
    int value;
public:
    Stroke_width() : value(0) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    int getValue();
    void what_is_this();
};

class Stroke_opacity : public Attribute {
private:
    double value;
public:
    Stroke_opacity() : value(1) {}
    std::string getName();
    void setValue(Shape* &s, char* attr_value);
    double getValue();
    void what_is_this();
};


class Point {
private:
    int x, y;
public:
    Point ();
    Point (int x, int y);
    Point (const Point& p);
    Point& operator= (const Point& p);
    void set_point (int x, int y);
};

class Shape{
protected:
    std::vector< Attribute*> attributes;
public:

    Shape& operator= (const Shape& s);
    int get_x();
    int get_y();
    int get_x1();
    int get_y1();
    int get_x2();
    int get_y2();
    int get_cx();
    int get_cy();
    int  get_r();
    int get_rx();
    int get_ry();
    int get_height();
    int get_width();
    Color get_stroke ();
    Color get_fill ();
    int get_stroke_width ();
    double get_stroke_opacity ();
    double get_fill_opacity ();

    void setAttribute(char* attr_name, char* attr_value);
    void input(rapidxml::xml_node<>* object_node);

    virtual void what_is_this() = 0;
};

class Line : public Shape{
private:
    // p1, p2
    // stroke
    // stroke_width, stroke_opacity
    Point p1, p2; 
    // transform
public:
    Line ();
    Line (const Line& l);
    Line& operator= (const Line& l);
    void what_is_this();
};

class Rectangle : public Shape{
private:
    // p
    // width, height
    // stroke, fill
    // stroke_width, stroke_opacity, fill_opacity
    Point p;
    Type width;
    Type height;
    // transform
public:
    Rectangle ();
    Rectangle (const Rectangle& r);
    Rectangle& operator= (const Rectangle& r);
    void what_is_this();
};

class Circle : public Shape{
private:
    // c
    // r
    // stroke, fill
    // stroke_width, stroke_opacity, fill_opacity
    Point c;
    Type r;
    // transform
public:
    Circle ();
    Circle (const Circle& c);
    Circle& operator= (const Circle& c);
    void what_is_this();
};

class Ellipse : public Shape{
private:
    // c
    // rx, ry
    // stroke, fill
    // stroke_width, stroke_opacity, fill_opacity
    Point c;
    Type rx;
    Type ry;
    // transform
public:
    Ellipse ();
    Ellipse (const Ellipse& e);
    Ellipse& operator= (const Ellipse& e);
    void what_is_this();
};

class Polyline : public Shape{
private:
    // vector<Point> points
    // stroke, fill
    // stroke_width, stroke_opacity, fill_opacity
    std::vector<Point> points;
    // transform
public:
    Polyline ();
    Polyline (const Polyline& p);
    Polyline& operator= (const Polyline& p);
    void what_is_this();
};

class Polygon : public Shape{
private:
    // vector<Point> points
    // stroke, fill
    // stroke_width, stroke_opacity, fill_opacity
    std::vector<Point> points;
    // transform
public:  
    Polygon ();
    Polygon (const Polygon& p);
    Polygon& operator= (const Polygon& p);
    void what_is_this();
};

class Text : public Shape {

public:

    void what_is_this();
};

class Path : public Shape {

public:

    void what_is_this();
};

class Group : public Shape {

public:

    void what_is_this();
};

namespace etc{
    Color atoc(char* c);
}

void inputFromFile(std::vector<Shape*> &_shape, std::string filename);
