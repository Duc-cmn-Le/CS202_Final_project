void MyLine:: draw(HDC hdc) {
    Graphics graphics(hdc);

    // Create a Pen object
    int re = this->sdata.get_stroke().red();
    int gr = this->sdata.get_stroke().green();
    int bl = this->sdata.get_stroke().blue();
    Color col = Color(this->sdata.get_stroke_opacity() * 255, re, gr, bl);
    Pen pen(col, 1.0*this->sdata.get_stroke_width());

    // Define
    int x1 = this->sdata.get_x1();
    int y1 = this->sdata.get_y1();
    int x2 = this->sdata.get_x2();
    int y2 = this->sdata.get_y2();
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);

    // Transform

    // Draw
    if (this->sdata.get_stroke_width() != 0)
        graphics.DrawMyLine(&pen, x1, y1, x2, y2);
}

void MyRectangle:: draw(HDC hdc) {
    Graphics graphics(hdc);

    // Create a Pen object
    int re = this->sdata.get_stroke().red();
    int gr = this->sdata.get_stroke().green();
    int bl = this->sdata.get_stroke().blue();
    Color col = Color(this->sdata.get_stroke_opacity() * 255, re, gr, bl);
    Pen pen(col, 1.0*this->sdata.get_stroke_width());

    // Define
    int x = this->sdata.get_x();
    int y = this->sdata.get_y();
    int width = this->sdata.get_width();
    int height = this->sdata.get_height();
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);

    // Transform

    // Fill
    re = this->sdata.get_fill().red();
    gr = this->sdata.get_fill().green();
    bl = this->sdata.get_fill().blue();
    SolidBrush brush(Color(this->sdata.get_fill_opacity() * 255, re, gr, bl));
    graphics.FillRectangle(&brush, x, y, width, height);
    // Draw
    if (this->sdata.get_stroke_width() != 0)
        graphics.DrawRectangle(&pen, x, y, width, height);
}

void MyCircle:: draw(HDC hdc) {
    Graphics graphics(hdc);

    // Create a Pen object
    int re = this->sdata.get_stroke().red();
    int gr = this->sdata.get_stroke().green();
    int bl = this->sdata.get_stroke().blue();
    Color col = Color(this->sdata.get_stroke_opacity() * 255, re, gr, bl);
    Pen pen(col, 1.0*this->sdata.get_stroke_width());

    // Define
    int x = this->sdata.get_cx() - this->sdata.get_r();
    int y = this->sdata.get_cy() - this->sdata.get_r();
    int width = this->sdata.get_r() * 2;
    int height = this->sdata.get_r() * 2;
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);

    // Transform

    // Fill
    re = this->sdata.get_fill().red();
    gr = this->sdata.get_fill().green();
    bl = this->sdata.get_fill().blue();
    SolidBrush brush(Color(this->sdata.get_fill_opacity() * 255, re, gr, bl));
    graphics.FillEllipse(&brush, x, y, width, height);
    // Draw
    if (this->sdata.get_stroke_width() != 0)
        graphics.DrawEllipse(&pen, x, y, width, height);
}

void MyEllipse:: draw(HDC hdc) {
    Graphics graphics(hdc);

    // Create a Pen object
    int re = this->sdata.get_stroke().red();
    int gr = this->sdata.get_stroke().green();
    int bl = this->sdata.get_stroke().blue();
    Color col = Color(this->sdata.get_stroke_opacity() * 255, re, gr, bl);
    Pen pen(col, 1.0*this->sdata.get_stroke_width());

    // Define
    int x = this->sdata.get_cx() - this->sdata.get_rx();
    int y = this->sdata.get_cy() - this->sdata.get_ry();
    int width = this->sdata.get_rx() * 2;
    int height = this->sdata.get_ry() * 2;
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);

    // Transform

    // Fill
    re = this->sdata.get_fill().red();
    gr = this->sdata.get_fill().green();
    bl = this->sdata.get_fill().blue();
    SolidBrush brush(Color(this->sdata.get_fill_opacity() * 255, re, gr, bl));
    graphics.FillEllipse(&brush, x, y, width, height);
    // Draw
    if (this->sdata.get_stroke_width() != 0)
        graphics.DrawEllipse(&pen, x, y, width, height);
}

void MyPolyline:: draw(HDC hdc) {
    Graphics graphics(hdc);
    GraphicsPath gpath;

    // Create a Pen object
    int re = this->sdata.get_stroke().red();
    int gr = this->sdata.get_stroke().green();
    int bl = this->sdata.get_stroke().blue();
    Color col = Color(this->sdata.get_stroke_opacity() * 255, re, gr, bl);
    Pen pen(col, 1.0*this->sdata.get_stroke_width());

    // Define
    int ssize = this->sdata.get_points().size();
    Point* tmp = new Point [this->sdata.get_points().size()];
    for (int i=0; i < ssize; i++)
        tmp[i] = Point(this->sdata.get_points()[i].get_x(), this->sdata.get_points()[i].get_y());
    gpath.AddLines(tmp, ssize);
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);

    // Transform

    // Fill
    re = this->sdata.get_fill().red();
    gr = this->sdata.get_fill().green();
    bl = this->sdata.get_fill().blue();
    SolidBrush brush(Color(this->sdata.get_fill_opacity() * 255, re, gr, bl));
    graphics.FillPath(&brush, &gpath);
    // Draw
    if (this->sdata.get_stroke_width() != 0)
        graphics.DrawPath(&pen, &gpath);
    delete [] tmp;
}

void MyPolygon:: draw(HDC hdc) {
    Graphics graphics(hdc);

    // Create a Pen object
    int re = this->sdata.get_stroke().red();
    int gr = this->sdata.get_stroke().green();
    int bl = this->sdata.get_stroke().blue();
    Color col = Color(this->sdata.get_stroke_opacity() * 255, re, gr, bl);
    Pen pen(col, 1.0*this->sdata.get_stroke_width());

    // Define
    int ssize = this->sdata.get_points().size();
    Point* tmp = new Point [this->sdata.get_points().size()];
    for (int i=0; i < ssize; i++)
        tmp[i] = Point(this->sdata.get_points()[i].get_x(), this->sdata.get_points()[i].get_y());
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);

    // Transform

    // Fill
    re = this->sdata.get_fill().red();
    gr = this->sdata.get_fill().green();
    bl = this->sdata.get_fill().blue();
    SolidBrush brush(Color(this->sdata.get_fill_opacity() * 255, re, gr, bl));
    graphics.FillPolygon(&brush, tmp, ssize);
    // Draw
    if (this->sdata.get_stroke_width() != 0)
        graphics.DrawPolygon(&pen, tmp, this->sdata.get_points().size());
    delete [] tmp;
}

void MyText:: draw(HDC hdc)
        {
            Graphics graphics(hdc);

            int re = this->sdata.get_fill().red();
            int gr = this->sdata.get_fill().green();
            int bl = this->sdata.get_fill().blue();

            // Define
            int x = this->sdata.get_x();
            int y = this->sdata.get_y();
            FontFamily  fontFamily(L"Times New Roman");

            int fontsize = this->sdata.get_font_size();  
            Font        font(&fontFamily, fontsize, FontStyleRegular, UnitPixel);
            PointF      point(x*1.0, y*1.0 - fontsize);

            SolidBrush  brush(Color(this->sdata.get_fill_opacity() * 255, re, gr, bl));

            string buf = string(this->get("string").retString());
            std::wstring wstr = std::wstring(buf.begin(),buf.end());
            graphics.SetSmoothingMode(SmoothingModeAntiAlias);

            graphics.DrawString(wstr.c_str(), -1, &font, point, &brush);
        }